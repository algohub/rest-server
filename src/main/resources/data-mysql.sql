INSERT IGNORE INTO `country` (`country_code`, `country_name`) VALUES
('AD', 'Andorra'),
('AE', 'United Arab Emirates'),
('AF', 'Afghanistan'),
('AG', 'Antigua and Barbuda'),
('AI', 'Anguilla'),
('AL', 'Albania'),
('AM', 'Armenia'),
('AO', 'Angola'),
('AQ', 'Antarctica'),
('AR', 'Argentina'),
('AS', 'American Samoa'),
('AT', 'Austria'),
('AU', 'Australia'),
('AW', 'Aruba'),
('AX', 'Åland'),
('AZ', 'Azerbaijan'),
('BA', 'Bosnia and Herzegovina'),
('BB', 'Barbados'),
('BD', 'Bangladesh'),
('BE', 'Belgium'),
('BF', 'Burkina Faso'),
('BG', 'Bulgaria'),
('BH', 'Bahrain'),
('BI', 'Burundi'),
('BJ', 'Benin'),
('BL', 'Saint Barthélemy'),
('BM', 'Bermuda'),
('BN', 'Brunei'),
('BO', 'Bolivia'),
('BQ', 'Bonaire'),
('BR', 'Brazil'),
('BS', 'Bahamas'),
('BT', 'Bhutan'),
('BV', 'Bouvet Island'),
('BW', 'Botswana'),
('BY', 'Belarus'),
('BZ', 'Belize'),
('CA', 'Canada'),
('CC', 'Cocos [Keeling] Islands'),
('CD', 'Democratic Republic of the Congo'),
('CF', 'Central African Republic'),
('CG', 'Republic of the Congo'),
('CH', 'Switzerland'),
('CI', 'Ivory Coast'),
('CK', 'Cook Islands'),
('CL', 'Chile'),
('CM', 'Cameroon'),
('CN', 'China'),
('CO', 'Colombia'),
('CR', 'Costa Rica'),
('CU', 'Cuba'),
('CV', 'Cape Verde'),
('CW', 'Curacao'),
('CX', 'Christmas Island'),
('CY', 'Cyprus'),
('CZ', 'Czech Republic'),
('DE', 'Germany'),
('DJ', 'Djibouti'),
('DK', 'Denmark'),
('DM', 'Dominica'),
('DO', 'Dominican Republic'),
('DZ', 'Algeria'),
('EC', 'Ecuador'),
('EE', 'Estonia'),
('EG', 'Egypt'),
('EH', 'Western Sahara'),
('ER', 'Eritrea'),
('ES', 'Spain'),
('ET', 'Ethiopia'),
('FI', 'Finland'),
('FJ', 'Fiji'),
('FK', 'Falkland Islands'),
('FM', 'Micronesia'),
('FO', 'Faroe Islands'),
('FR', 'France'),
('GA', 'Gabon'),
('GB', 'United Kingdom'),
('GD', 'Grenada'),
('GE', 'Georgia'),
('GF', 'French Guiana'),
('GG', 'Guernsey'),
('GH', 'Ghana'),
('GI', 'Gibraltar'),
('GL', 'Greenland'),
('GM', 'Gambia'),
('GN', 'Guinea'),
('GP', 'Guadeloupe'),
('GQ', 'Equatorial Guinea'),
('GR', 'Greece'),
('GS', 'South Georgia and the South Sandwich Islands'),
('GT', 'Guatemala'),
('GU', 'Guam'),
('GW', 'Guinea-Bissau'),
('GY', 'Guyana'),
('HK', 'Hong Kong'),
('HM', 'Heard Island and McDonald Islands'),
('HN', 'Honduras'),
('HR', 'Croatia'),
('HT', 'Haiti'),
('HU', 'Hungary'),
('ID', 'Indonesia'),
('IE', 'Ireland'),
('IL', 'Israel'),
('IM', 'Isle of Man'),
('IN', 'India'),
('IO', 'British Indian Ocean Territory'),
('IQ', 'Iraq'),
('IR', 'Iran'),
('IS', 'Iceland'),
('IT', 'Italy'),
('JE', 'Jersey'),
('JM', 'Jamaica'),
('JO', 'Jordan'),
('JP', 'Japan'),
('KE', 'Kenya'),
('KG', 'Kyrgyzstan'),
('KH', 'Cambodia'),
('KI', 'Kiribati'),
('KM', 'Comoros'),
('KN', 'Saint Kitts and Nevis'),
('KP', 'North Korea'),
('KR', 'South Korea'),
('KW', 'Kuwait'),
('KY', 'Cayman Islands'),
('KZ', 'Kazakhstan'),
('LA', 'Laos'),
('LB', 'Lebanon'),
('LC', 'Saint Lucia'),
('LI', 'Liechtenstein'),
('LK', 'Sri Lanka'),
('LR', 'Liberia'),
('LS', 'Lesotho'),
('LT', 'Lithuania'),
('LU', 'Luxembourg'),
('LV', 'Latvia'),
('LY', 'Libya'),
('MA', 'Morocco'),
('MC', 'Monaco'),
('MD', 'Moldova'),
('ME', 'Montenegro'),
('MF', 'Saint Martin'),
('MG', 'Madagascar'),
('MH', 'Marshall Islands'),
('MK', 'Macedonia'),
('ML', 'Mali'),
('MM', 'Myanmar [Burma]'),
('MN', 'Mongolia'),
('MO', 'Macao'),
('MP', 'Northern Mariana Islands'),
('MQ', 'Martinique'),
('MR', 'Mauritania'),
('MS', 'Montserrat'),
('MT', 'Malta'),
('MU', 'Mauritius'),
('MV', 'Maldives'),
('MW', 'Malawi'),
('MX', 'Mexico'),
('MY', 'Malaysia'),
('MZ', 'Mozambique'),
('NA', 'Namibia'),
('NC', 'New Caledonia'),
('NE', 'Niger'),
('NF', 'Norfolk Island'),
('NG', 'Nigeria'),
('NI', 'Nicaragua'),
('NL', 'Netherlands'),
('NO', 'Norway'),
('NP', 'Nepal'),
('NR', 'Nauru'),
('NU', 'Niue'),
('NZ', 'New Zealand'),
('OM', 'Oman'),
('PA', 'Panama'),
('PE', 'Peru'),
('PF', 'French Polynesia'),
('PG', 'Papua New Guinea'),
('PH', 'Philippines'),
('PK', 'Pakistan'),
('PL', 'Poland'),
('PM', 'Saint Pierre and Miquelon'),
('PN', 'Pitcairn Islands'),
('PR', 'Puerto Rico'),
('PS', 'Palestine'),
('PT', 'Portugal'),
('PW', 'Palau'),
('PY', 'Paraguay'),
('QA', 'Qatar'),
('RE', 'Réunion'),
('RO', 'Romania'),
('RS', 'Serbia'),
('RU', 'Russia'),
('RW', 'Rwanda'),
('SA', 'Saudi Arabia'),
('SB', 'Solomon Islands'),
('SC', 'Seychelles'),
('SD', 'Sudan'),
('SE', 'Sweden'),
('SG', 'Singapore'),
('SH', 'Saint Helena'),
('SI', 'Slovenia'),
('SJ', 'Svalbard and Jan Mayen'),
('SK', 'Slovakia'),
('SL', 'Sierra Leone'),
('SM', 'San Marino'),
('SN', 'Senegal'),
('SO', 'Somalia'),
('SR', 'Suriname'),
('SS', 'South Sudan'),
('ST', 'São Tomé and Príncipe'),
('SV', 'El Salvador'),
('SX', 'Sint Maarten'),
('SY', 'Syria'),
('SZ', 'Swaziland'),
('TC', 'Turks and Caicos Islands'),
('TD', 'Chad'),
('TF', 'French Southern Territories'),
('TG', 'Togo'),
('TH', 'Thailand'),
('TJ', 'Tajikistan'),
('TK', 'Tokelau'),
('TL', 'East Timor'),
('TM', 'Turkmenistan'),
('TN', 'Tunisia'),
('TO', 'Tonga'),
('TR', 'Turkey'),
('TT', 'Trinidad and Tobago'),
('TV', 'Tuvalu'),
('TW', 'Taiwan'),
('TZ', 'Tanzania'),
('UA', 'Ukraine'),
('UG', 'Uganda'),
('UM', 'U.S. Minor Outlying Islands'),
('US', 'United States'),
('UY', 'Uruguay'),
('UZ', 'Uzbekistan'),
('VA', 'Vatican City'),
('VC', 'Saint Vincent and the Grenadines'),
('VE', 'Venezuela'),
('VG', 'British Virgin Islands'),
('VI', 'U.S. Virgin Islands'),
('VN', 'Vietnam'),
('VU', 'Vanuatu'),
('WF', 'Wallis and Futuna'),
('WS', 'Samoa'),
('XK', 'Kosovo'),
('YE', 'Yemen'),
('YT', 'Mayotte'),
('ZA', 'South Africa'),
('ZM', 'Zambia'),
('ZW', 'Zimbabwe');

INSERT IGNORE INTO `language` (`language`) VALUES
  ('English'),
  ('Chinese');

INSERT IGNORE INTO `user` (`id`,`username`,`password_hash`, `email`, `gender`, `occupation`, `registered_at`,`version`) VALUES
  (1,'admin','$2a$12$54SgtCEnaUJ8oDl3.anH7eoxpeV7.8JGtozktKOo8al6UWdQO0q/G','admin@algohub.org', 'Male', 'Professional', NOW(), 0);
INSERT IGNORE INTO `user` (`id`,`username`,`password_hash`, `email`, `gender`, `occupation`, `registered_at`,`version`) VALUES
  (2,'user','$2a$12$tBhNMZvvQh66n2GgczaVUeozVt3LaR/FOsIjyD/pXVN.AxNZdLSmG','user@algohub.org', 'Female', 'Student', NOW(), 0);

INSERT IGNORE INTO `role` (`id`,`name`) VALUES (1,'ROLE_USER');
INSERT IGNORE INTO `role` (`id`,`name`) VALUES (2,'ROLE_ADMIN');
INSERT IGNORE INTO `role` (`id`,`name`) VALUES (3,'ROLE_GUEST');

INSERT IGNORE INTO `user_role` (`user_id`, `role_id`) values (1,1);
INSERT IGNORE INTO `user_role` (`user_id`, `role_id`) values (1,2);
INSERT IGNORE INTO `user_role` (`user_id`, `role_id`) values (2,1);

INSERT IGNORE INTO `question` (`id`, `json`) VALUES('2-sum', '{"id":"2-sum","title":{"de":"","en":"2Sum","es":"","fr":"","ja":"","pt-BR":"","ru":"","zh-CN":""},"description":{"en":"Given an array of integers, find two numbers such that they add up to a specific target number.\n\nThe function `twoSum` should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.\n\n**Note**: You may assume that each input would have exactly one solution.\n\n**Challenge**: Either of the following solutions are acceptable:\n\n* O(1) Space, O(nlogn) Time\n* O(n) Space, O(n) Time"},"category":"algorithm","tags":["Array","Hash Table"],"level":2,"score":21,"time_limit":10,"memory_limit":32,"related_problems":["3-sum","3-sum-closest","4-sum"],"function":{"name":"twoSum","return":{"type":{"value":"array","element_type":{"value":"int"}},"comment":" Indices of the two numbers"},"parameters":[{"name":"nums","type":{"value":"array","element_type":{"value":"int"}},"comment":"An array of Integer"},{"name":"target","type":{"value":"int"},"comment":"target = numbers[index1] + numbers[index2]"}]},"author":{"name":"soulmachine","email":"soulmachine@gmail.com","website":"http://www.soulmachine.me","github":"https://github.com/soulmachine","facebook":"https://www.facebook.com/soulmachine","linkedin":"http://www.linkedin.com/in/soulmachine","twitter":"https://twitter.com/soulmachine"},"test_cases":[{"input":[[2,7,11,15],9],"output":[1,2]},{"input":[[1,0,-1],-1],"output":[2,3]},{"input":[[1,0,-1],0],"output":[1,3]},{"input":[[1,0,-1],1],"output":[1,2]},{"input":[[1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99],-64],"output":[8,11]},{"input":[[1,2,33,23,2423,33,23,1,7,6,8787,5,33,2,3,-23,-54,-67,100,400],407],"output":[9,20]},{"input":[[-1,-2,-3,-4,-5,-6,-100,-98,-111,-11],-111],"output":[7,10]},{"input":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,9,9,9,10,11,1001,2001,198,201,203,201,999,345,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,4,5,6,1,1,1,1,1,1,1,1,1,1,1,101,1,1,1,1,1,1,1,1],107],"output":[78,90]}],"test_cases_generator":"function testCasesGenerator() {\n\treturn [\n\t{\n\t\tinput: [[2,7,11,15], 9],\n\t\toutput: [1,2]\n\t},\n\t{\n\t\tinput: [[1,0,-1], -1],\n\t\toutput: [2,3]\n\t}\n\t]\ntestCasesGenerator()\n}"}');
INSERT IGNORE INTO `question` (`id`, `json`) VALUES('stoi', '{"id":"stoi","title":{"de":"","en":"String to Integer (atoi)","es":"","fr":"","ja":"","pt-BR":"","ru":"","zh-CN":""},"description":{"en":"Implement `std::stoi()` to convert a string to an integer.\n\n**Hint**: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.\n\n**Notes**: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front."},"category":"algorithm","tags":["String"],"level":2,"score":21,"time_limit":10,"memory_limit":32,"related_problems":["str-str"],"function":{"name":"myStoi","return":{"type":{"value":"int"},"comment":"An integer"},"parameters":[{"name":"str","type":{"value":"string"},"comment":"A string"}]},"author":{"name":"soulmachine","email":"soulmachine@gmail.com","website":"http://www.soulmachine.me","github":"https://github.com/soulmachine","facebook":"https://www.facebook.com/soulmachine","linkedin":"http://www.linkedin.com/in/soulmachine","twitter":"https://twitter.com/soulmachine"},"test_cases":[{"input":[""],"output":0},{"input":["1"],"output":1},{"input":["+1"],"output":1},{"input":["-1"],"output":-1},{"input":["123"],"output":123},{"input":["-123"],"output":-123},{"input":["+-2"],"output":0},{"input":["010"],"output":10}]}');
INSERT IGNORE INTO `question` (`id`, `json`) VALUES('word-ladder', '{"id":"word-ladder","title":{"de":"","en":"Word Ladder","es":"","fr":"","ja":"","pt-BR":"","ru":"","zh-CN":""},"description":{"en":"Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:\n\n1. Only one letter can be changed at a time\n2. Each intermediate word must exist in the dictionary"},"category":"algorithm","tags":["BFS"],"level":4,"score":82,"time_limit":10,"memory_limit":32,"related_problems":["word-ladder-ii"],"function":{"name":"ladderLength","return":{"type":{"value":"int"},"comment":"The shortest length"},"parameters":[{"name":"begin","type":{"value":"string"},"comment":"the begin word"},{"name":"end","type":{"value":"string"},"comment":"the end word"},{"name":"dict","type":{"value":"set","element_type":{"value":"string"}},"comment":"the dictionary"}]},"author":{"name":"soulmachine","email":"soulmachine@gmail.com","website":"http://www.soulmachine.me","github":"https://github.com/soulmachine","facebook":"https://www.facebook.com/soulmachine","linkedin":"http://www.linkedin.com/in/soulmachine","twitter":"https://twitter.com/soulmachine"},"test_cases":[{"input":["a","c",["a","b","c"]],"output":2},{"input":["hot","dog",["hot","cog","dog","tot","hog","hop","pot","dot"]],"output":3},{"input":["game","thee",["frye","heat","tree","thee","game","free","hell","fame","faye"]],"output":7},{"input":["kiss","tusk",["miss","dusk","kiss","musk","tusk","diss","disk","sang","ties","muss"]],"output":5},{"input":["teach","place",["peale","wilts","place","fetch","purer","pooch","peace","poach","berra","teach","rheum","peach"]],"output":4},{"input":["ta","if",["ts","sc","ph","ca","jr","hf","to","if","ha","is","io","cf","ta"]],"output":4},{"input":["qa","sq",["si","go","se","cm","so","ph","mt","db","mb","sb","kr","ln","tm","le","av","sm","ar","ci","ca","br","ti","ba","to","ra","fa","yo","ow","sn","ya","cr","po","fe","ho","ma","re","or","rn","au","ur","rh","sr","tc","lt","lo","as","fr","nb","yb","if","pb","ge","th","pm","rb","sh","co","ga","li","ha","hz","no","bi","di","hi","qa","pi","os","uh","wm","an","me","mo","na","la","st","er","sc","ne","mn","mi","am","ex","pt","io","be","fm","ta","tb","ni","mr","pa","he","lr","sq","ye"]],"output":5},{"input":["cet","ism",["kid","tag","pup","ail","tun","woo","erg","luz","brr","gay","sip","kay","per","val","mes","ohs","now","boa","cet","pal","bar","die","war","hay","eco","pub","lob","rue","fry","lit","rex","jan","cot","bid","ali","pay","col","gum","ger","row","won","dan","rum","fad","tut","sag","yip","sui","ark","has","zip","fez","own","ump","dis","ads","max","jaw","out","btu","ana","gap","cry","led","abe","box","ore","pig","fie","toy","fat","cal","lie","noh","sew","ono","tam","flu","mgm","ply","awe","pry","tit","tie","yet","too","tax","jim","san","pan","map","ski","ova","wed","non","wac","nut","why","bye","lye","oct","old","fin","feb","chi","sap","owl","log","tod","dot","bow","fob","for","joe","ivy","fan","age","fax","hip","jib","mel","hus","sob","ifs","tab","ara","dab","jag","jar","arm","lot","tom","sax","tex","yum","pei","wen","wry","ire","irk","far","mew","wit","doe","gas","rte","ian","pot","ask","wag","hag","amy","nag","ron","soy","gin","don","tug","fay","vic","boo","nam","ave","buy","sop","but","orb","fen","paw","his","sub","bob","yea","oft","inn","rod","yam","pew","web","hod","hun","gyp","wei","wis","rob","gad","pie","mon","dog","bib","rub","ere","dig","era","cat","fox","bee","mod","day","apr","vie","nev","jam","pam","new","aye","ani","and","ibm","yap","can","pyx","tar","kin","fog","hum","pip","cup","dye","lyx","jog","nun","par","wan","fey","bus","oak","bad","ats","set","qom","vat","eat","pus","rev","axe","ion","six","ila","lao","mom","mas","pro","few","opt","poe","art","ash","oar","cap","lop","may","shy","rid","bat","sum","rim","fee","bmw","sky","maj","hue","thy","ava","rap","den","fla","auk","cox","ibo","hey","saw","vim","sec","ltd","you","its","tat","dew","eva","tog","ram","let","see","zit","maw","nix","ate","gig","rep","owe","ind","hog","eve","sam","zoo","any","dow","cod","bed","vet","ham","sis","hex","via","fir","nod","mao","aug","mum","hoe","bah","hal","keg","hew","zed","tow","gog","ass","dem","who","bet","gos","son","ear","spy","kit","boy","due","sen","oaf","mix","hep","fur","ada","bin","nil","mia","ewe","hit","fix","sad","rib","eye","hop","haw","wax","mid","tad","ken","wad","rye","pap","bog","gut","ito","woe","our","ado","sin","mad","ray","hon","roy","dip","hen","iva","lug","asp","hui","yak","bay","poi","yep","bun","try","lad","elm","nat","wyo","gym","dug","toe","dee","wig","sly","rip","geo","cog","pas","zen","odd","nan","lay","pod","fit","hem","joy","bum","rio","yon","dec","leg","put","sue","dim","pet","yaw","nub","bit","bur","sid","sun","oil","red","doc","moe","caw","eel","dix","cub","end","gem","off","yew","hug","pop","tub","sgt","lid","pun","ton","sol","din","yup","jab","pea","bug","gag","mil","jig","hub","low","did","tin","get","gte","sox","lei","mig","fig","lon","use","ban","flo","nov","jut","bag","mir","sty","lap","two","ins","con","ant","net","tux","ode","stu","mug","cad","nap","gun","fop","tot","sow","sal","sic","ted","wot","del","imp","cob","way","ann","tan","mci","job","wet","ism","err","him","all","pad","hah","hie","aim","ike","jed","ego","mac","baa","min","com","ill","was","cab","ago","ina","big","ilk","gal","tap","duh","ola","ran","lab","top","gob","hot","ora","tia","kip","han","met","hut","she","sac","fed","goo","tee","ell","not","act","gil","rut","ala","ape","rig","cid","god","duo","lin","aid","gel","awl","lag","elf","liz","ref","aha","fib","oho","tho","her","nor","ace","adz","fun","ned","coo","win","tao","coy","van","man","pit","guy","foe","hid","mai","sup","jay","hob","mow","jot","are","pol","arc","lax","aft","alb","len","air","pug","pox","vow","got","meg","zoe","amp","ale","bud","gee","pin","dun","pat","ten","mob"]],"output":11}]}');
